# boot up an SQL database in memory of the JUnit process
#spring.datasource.url=jdbc:h2:mem:test
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa
spring.datasource.url= jdbc:postgresql://${embedded.postgresql.host}:${embedded.postgresql.port}/${embedded.postgresql.schema}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username= ${embedded.postgresql.user}
spring.datasource.password= ${embedded.postgresql.password}

# p6spy is a JDBC driver proxy logging all SQLs
# 1) enabled here via p6spy-spring-boot-starter in pom.xml 
decorator.datasource.p6spy.log-format=%(executionTime) ms|%(category)|connection%(connectionId)|%(sqlSingleLine)
# 2) alternatively, p6spy can be setup manually by including p6spy:p6spy in the classpath and setting these two properties:

#spring.datasource.url=jdbc:p6spy:h2:mem:test
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver


# if you remove this, multiple schedulers can fire at the same time due to
#  multiple cached Spring Contexts started in parallel
scheduling.enabled=false

# enable async only for selected tests
async.enabled=false

# send api calls to WireMock started on a random port by @AutoConfigureWireMock(port = 0)
safety.service.url.base=http://localhost:${wiremock.server.port:9999}
email.sender.url.base=http://localhost:${wiremock.server.port:9999}

# configure embedded Kafka in-memory
kafka.enabled=true
spring.kafka.producer.bootstrap-servers=${spring.embedded.kafka.brokers}
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.interceptor.classes=victor.testing.spring.config.CustomProducerInterceptor
spring.kafka.consumer.bootstrap-servers=${spring.embedded.kafka.brokers}
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=victor.**
# avoid losing messages sent before test listener connects
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.group-id=test