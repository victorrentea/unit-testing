# boot up an SQL database in memory of the JUnit process
spring.datasource.url=jdbc:p6spy:h2:mem:test
spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.username=sa
spring.datasource.password=sa

# poti sa-i spui H2 sa emuleze sintaxa bazei tale https://www.h2database.com/html/features.html
# - pt microserviciu nou cu JPA, incearca H2
# cand nu mai merge cu H2, poti
# - sa folosesti un container Docker -> @Testcontainers
# - sau te legi de o baza remote ORACLE reala, pe schema ta personala
#   dar asta e mai lent si mai greu de configurat, fragil, etc.

# p6spy is a JDBC driver proxy logging all SQLs in teste obligatoriu p6spy!!!
# 1) enabled here via p6spy-spring-boot-starter in pom.xml 
decorator.datasource.p6spy.log-format=%(executionTime) ms|%(category)|connection%(connectionId)|%(sqlSingleLine)
# 2) alternatively, p6spy can be setup manually by including p6spy:p6spy in the classpath and setting these two properties:
#spring.datasource.url=jdbc:p6spy:h2:mem:test
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver


# if you remove this, multiple schedulers can fire at the same time due to
#  multiple cached Spring Contexts started in parallel
scheduling.enabled=false

# enable async only for selected tests
async.enabled=false

# send api calls to WireMock started on a random port by @AutoConfigureWireMock(port = 0)
safety.service.url.base=http://localhost:${wiremock.server.port:9999}
email.sender.url.base=http://localhost:${wiremock.server.port:9999}

# configure embedded Kafka in-memory
kafka.enabled=true
# avoid losing messages sent before test listener connects
spring.kafka.consumer.auto-offset-reset=earliest


# Spring reuses the context in a cache between test classes
# To optimize Spring Context reuse between test classes:
# 1: uncomment next line and rerun **all** your tests
#logging.level.org.springframework.test.context.cache=DEBUG
# 2: Find the last line like this, and see missCount=???? x 10..30 seconds
# Spring test ApplicationContext cache statistics: [... size = 2, maxSize = 32, parentContextCount = 0, hitCount = 102, missCount = 4]
# 3: Find all lines containing "Storing ApplicationContext". The test class that ran before it forced Spring to reboot.


spring.kafka.producer.bootstrap-servers=${spring.embedded.kafka.brokers}
spring.kafka.consumer.bootstrap-servers=${spring.embedded.kafka.brokers}
