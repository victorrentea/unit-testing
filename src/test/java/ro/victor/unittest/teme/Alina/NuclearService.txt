
import java.time.LocalDateTime;

/**
 * Write automated tests for the code below, such that any line here is altered (changed in any way) a test would fail indicating a bug.
 * Assume the code is super-critical. Human lives depend on it.
 * Therefore, if any refactoring is required before testing, only perform 100% safe moves.
 * For some methods, you might need to rely on mocks or alternative dummy implems.
 */
class NuclearService {
    @NonNull
    private Logger log;
    int phaserThreshold;
    @NonNull
    private DistanceService distanceService;
    @NonNull
    private ProbeService probeService;

    public NuclearService(int phaserThreshold, @NonNull Logger log, @NonNull DistanceService distanceService, @NonNull ProbeService probeService) {
        this.phaserThreshold = phaserThreshold;
        this.log = log;
        this.distanceService = distanceService;
        this.probeService = probeService;
    }

    public double interpolateQuantum(int atoms, double mark1) {
        if (atoms - phaserThreshold < 5) {
            throw new IllegalStateException("Too few atoms");
        }
        log.debug("Processing mass " + atoms);
        double mark2 = 0;
        if (atoms > 2 * phaserThreshold) {
            mark2 = mark1 / 2;
        }
        return atoms * mark1 + mark1 * mark1 - mark2;
    }

    public boolean hasRequiredMass(int quanta, int speed, int destinationSolarSystemId) {
        return distanceService.distanceTo(destinationSolarSystemId) / speed > quanta;
    }

    public void reportProbeStats(Coords coord, double gravity) {
        if (!probeService.hasStatsNear(coord)) {
            probeService.reportStats(coord, gravity, LocalDateTime.now());
        } else {
            log.debug("Ignoring duplicate stats at: " + coord);
        }
    }
}


class Coords {
}

class DistanceServiceImpl implements DistanceService {
    public long distanceTo(int destinationSolarSystemId) {
        throw new IllegalStateException("Can't call this from tests!");
    }
}

interface DistanceService {
    long distanceTo(int destinationSolarSystemId);
}

class ProbeServiceImpl implements ProbeService {
    @Override
    public boolean hasStatsNear(Coords coord) {
        throw new IllegalStateException("Can't call this from tests!");
    }

    @Override
    public void reportStats(Coords coord, double gravity, LocalDateTime timeStamp) {
        throw new IllegalStateException("Can't call this from tests!");
    }
}

interface ProbeService {
    boolean hasStatsNear(Coords coord);

    void reportStats(Coords coord, double gravity, LocalDateTime timeStamp);
}


class LoggerImpl implements Logger {
    // private static final Logger log = LoggerFactory.getLogger(NuclearService.class);
    public void debug(String s) {
        // lene de dependinta org.slf4j.Logger
        // log.debug(s) ..
    }
}

interface Logger {
    void debug(String s);
}
